# out/Makefile (clang 11.0.3 (clang-1103.0.32.59), Darwin-19.4.0-x86_64)
#
# generated by Nore (https://github.com/junjiemars/nore)
#

CC = cc


CPP = $(CC)
AS = $(CC)
AR = ar
LINK = $(CC)

CPPFLAGS = 
ASFLAGS = 
LDFLAGS = -Lout/lib
LDLIBS = 
ARFLAGS = 
LFLAGS = 
YFLAGS = 

CFLAGS = -Werror -Wall -Wextra -g -std=c99 -O0


INC = -Iout -Iout/inc

nm_symbol_opt = -g
nm_warn_opt = -Wall -Wextra
nm_error_opt = -Werror
nm_debug_opt = 
nm_release_opt = 
nm_std_opt = -std=c99
nm_optimize_opt = -O0
nm_arch_opt = 
nm_verbose_opt = 


# feature
nm_model_opt = 
nm_utf_opt = 
nm_trigraph_opt = -Wno-trigraphs
nm_openmp_opt = -fopenmp

# stage
nm_stage_pre = -E
nm_stage_chk = -fsyntax-only
nm_stage_asm = -S
nm_stage_c = -c

# macro define 
nm_def_opt = -D
nm_undef_opt = -U

# inc
nm_inc_opt = -I

# lib
nm_shared_opt = -dynamiclib
nm_libdir_opt = -L
nm_lib_opt = -l

# link
nm_link_opt = 

# path separator
nm_p = :

# nore options
NM_SYMBOL = YES
NM_OPTIMIZE = NO
NM_WARN = YES
NM_ERROR = YES
NM_DEBUG = YES
NM_VERBOSE = NO
NM_STD = YES
NM_ARCH = NO

# platform
NM_SYSTEM = Darwin
NM_RELEASE = 19.4.0
NM_MACHINE = x86_64
CC_NAME = clang
CC_VER = 11000000

# output option
cpp_out = -o 
asm_out = -o 
obj_out = -o 
lib_out = -o 
ar_out = rcs 
bin_out = -o 

# output extension
cpp_ext = .i
asm_ext = .s
obj_ext = .o
lib_ext = .dylib
ar_ext = .a
bin_ext = 


default: all

clean:
	-$(RM) -r out/bin/*
	-$(RM) -r out/lib/*
	-$(RM) -r out/inc/*
	-$(RM) -r out/etc/*
	-$(RM) -r out/var/*
	-$(RM) -r out/tmp/*


install: all /opt/local/bin /opt/local/lib /opt/local/include /opt/local/etc
	$(call cp-if, out/bin, /opt/local/bin/)
	$(call cp-if, out/lib, /opt/local/lib/)
	$(call cp-if, out/inc, /opt/local/include/)
	$(call cp-if, out/etc, /opt/local/etc/)


/opt/local/bin /opt/local/lib /opt/local/include /opt/local/etc:
	$(call mkdir-if, /opt/local/bin)
	$(call mkdir-if, /opt/local/lib)
	$(call mkdir-if, /opt/local/include)
	$(call mkdir-if, /opt/local/etc)
	$(call mkdir-if, /opt/local/var)


mkdir-if = $(if $(wildcard $1),,mkdir -p $1)
cp-if = $(foreach f,$(wildcard $1/*),$(shell cp -r $(f) $2))


#---------------------------------------

root = ./

inc_path=out/inc/
tmp_path=out/tmp/
lib_path=out/lib/
bin_path=out/bin/

#---------------------------------------

all: lib
test: lib_test


.PHONY: default all clean test task install \
        lib lib_test
